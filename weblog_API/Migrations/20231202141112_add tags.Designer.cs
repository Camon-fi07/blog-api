// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using weblog_API.Data;

#nullable disable

namespace weblog_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231202141112_add tags")]
    partial class addtags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("weblog_API.Models.Community.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("weblog_API.Models.Community.UserCommunity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CommunityId");

                    b.HasIndex("CommunityId");

                    b.ToTable("UserCommunities");
                });

            modelBuilder.Entity("weblog_API.Models.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9f82a79-8501-4dea-96de-300775ea54aa"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1185),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("fca8f8d9-f386-41c8-ac14-be2660378054"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1189),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("e76bd965-6159-42cf-b521-e4bf2356f327"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1191),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("32f1aff6-0940-4c9c-939d-ee7571fc67cd"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1193),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("36d37a9b-e25b-4261-b556-a06ed2ac81f0"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1195),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("b17ae7cc-a0b4-4161-be69-c7f4ceee3a05"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1208),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("08d8de3c-4fe6-44d0-96d9-553053b0bf40"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1210),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("611f5b6e-8c1b-45a8-904b-13a58f0a97a7"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1212),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("02b7fa9e-8ec1-4e8a-a9fe-c7acb650b818"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1214),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("8ecd3b0d-7a60-4d12-8e0e-3953c7a0adda"),
                            CreateTime = new DateTime(2023, 12, 2, 14, 11, 12, 62, DateTimeKind.Utc).AddTicks(1216),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("weblog_API.Models.TokenModel", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Token");

                    b.ToTable("BannedTokens");
                });

            modelBuilder.Entity("weblog_API.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("weblog_API.Models.Community.UserCommunity", b =>
                {
                    b.HasOne("weblog_API.Models.Community.Community", "Community")
                        .WithMany("Subscribers")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weblog_API.Models.User.User", "User")
                        .WithMany("Communities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("weblog_API.Models.Community.Community", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("weblog_API.Models.User.User", b =>
                {
                    b.Navigation("Communities");
                });
#pragma warning restore 612, 618
        }
    }
}
